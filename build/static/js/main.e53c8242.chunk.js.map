{"version":3,"sources":["App.js","serviceWorker.js","index.js","../node_modules/pdfjs-dist/build sync"],"names":["MIN_WIDTH","App","useState","pages","setPages","container","setContainer","createPages","count","i","push","pageNumber","width","offsetWidth","key","className","ref","el","file","onLoadSuccess","numPages","download","href","icon","color","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id"],"mappings":"mPAKMA,G,OAAY,KAwCHC,MAtCf,WAAgB,IAAD,EACaC,qBADb,mBACNC,EADM,KACCC,EADD,OAEqBF,qBAFrB,mBAENG,EAFM,KAEKC,EAFL,KAaPC,EAAc,SAACC,GAEnB,IADA,IAAIL,EAAQ,GACHM,EAAI,EAAGA,GAAKD,EAAOC,IAC1BN,EAAMO,KACJ,kBAAC,OAAD,CAAMC,WAAYF,EAAGG,MAPlBP,EAAUQ,aAAeb,EAOkBc,IAAKL,KAGvD,OAAON,GAGT,OACE,yBAAKY,UAAU,MAAMC,IAAK,SAAAC,GAAE,OAAKX,EAAaW,KAC5C,kBAAC,WAAD,CACEC,KAAK,yBACLC,cAvBgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjBjB,EAAQI,EAAYa,GAC1BhB,EAASD,KAuBJA,GAEH,uBAAGY,UAAU,eAAeM,UAAQ,EAACC,KAAK,0BACxC,kBAAC,IAAD,CAAcC,KAAK,iBAAiBC,MAAM,aC3B9BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,iBEnInB,SAASC,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,I","file":"static/js/main.e53c8242.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Document, Page } from \"react-pdf/dist/entry.webpack\";\nimport MaterialIcon from 'material-icons-react';\nimport \"./App.css\";\n\nconst MIN_WIDTH = 600;\n\nfunction App() {\n  const [pages, setPages] = useState();\n  const [container, setContainer] = useState();\n\n  const onLoadSuccess = ({ numPages }) => {\n    const pages = createPages(numPages);\n    setPages(pages);\n  };\n\n  const calculateWidth = () => {\n    return container.offsetWidth || MIN_WIDTH;\n  };\n\n  const createPages = (count) => {\n    let pages = [];\n    for (let i = 1; i <= count; i++) {\n      pages.push(\n        <Page pageNumber={i} width={calculateWidth()} key={i} />\n      )\n    }\n    return pages;\n  }\n\n  return (\n    <div className=\"App\" ref={el => (setContainer(el))}>\n      <Document\n        file=\"/CV - Igor Sobolev.pdf\"\n        onLoadSuccess={onLoadSuccess}\n      >\n        {pages}\n      </Document>\n      <a className=\"download-btn\" download href=\"/CV - Igor Sobolev.pdf\">\n        <MaterialIcon icon=\"cloud_download\" color=\"white\" />\n      </a>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 23;"],"sourceRoot":""}